{"version":3,"sources":["components/CardDisplay.tsx","components/StatsPanel.tsx","App.tsx","client/index.ts","index.tsx"],"names":["CardDisplay","hand","reverse","map","value","suit","className","src","process","alt","StatsPanel","stats","games","busts","average","toFixed","App","useState","client","setClient","setHand","setStats","handUpdateCall","endpoint","a","fetch","json","useEffect","then","body","hit","cards","reset","useClient","onClick","ReactDOM","render","document","getElementById"],"mappings":"wOAGaA,EAAqC,SAAC,GAAD,IAAEC,EAAF,EAAEA,KAAF,OAC9C,qCACI,8BAAMA,EAAKA,KAAKC,UAAUC,KAAI,mCAAEC,EAAF,KAASC,EAAT,YAC5B,qBAAKC,UAAU,OAAOC,IAAG,UAAKC,SAAL,kBAAuD,kBAAXJ,EAAsBA,EAAQA,EAAM,IAAhF,OAAqFC,EAAK,GAA1F,QAAoGI,IAAG,UAAKL,EAAL,eAAiBC,UAInJ,kDAAqBJ,EAAKG,SAEzBH,EAAKG,MAAQ,IAAM,6BCTfM,EAAkC,SAAC,GAAc,IAAZC,EAAW,EAAXA,MAC9C,IAAIA,EACA,OAAO,KAF8C,IAKjDC,EAA0BD,EAA1BC,MAAOC,EAAmBF,EAAnBE,MAAOC,EAAYH,EAAZG,QACtB,OAAQ,gCACJ,0CACYF,KAEZ,0CACYC,KAEZ,4CACcC,EAAQC,QAAQ,UCSvBC,EArBH,WAAO,IAAD,ECwBO,WAAgF,IAAD,EAC1EC,qBAD0E,mBAC/FC,EAD+F,KACvFC,EADuF,OAE9EF,qBAF8E,mBAE/FhB,EAF+F,KAEzFmB,EAFyF,OAG5EH,qBAH4E,mBAG/FN,EAH+F,KAGxFU,EAHwF,KAKhGC,EAAiB,SAACC,GAAD,6BAAsB,4BAAAC,EAAA,sEACjBC,MAAM,IAAD,OAAKF,IADO,8BACMG,OADN,OACrCzB,EADqC,OAE3CmB,EAAQnB,GAFmC,4CAmB7C,OAdA0B,qBAAU,WACRF,MAAM,YAAYG,MAAK,SAAAC,GAAI,OAAIA,EAAKH,UAAQE,MAAK,SAAA3B,GAC7CmB,EAAQnB,GACRkB,EAAU,CACNW,IAAKR,EAAe,OACpBS,MAAOT,EAAe,SACtBU,MAAOV,EAAe,SACtBX,MAAM,WAAD,4BAAE,4BAAAa,EAAA,sEACwBC,MAAM,UAD9B,8BACyCC,OADzC,OACGf,EADH,OAEHU,EAASV,GAFN,2CAAF,kDAAC,UAMb,IACI,CAACV,EAAMiB,EAAQP,GD/CQsB,GADd,mBACThC,EADS,KACHiB,EADG,KACKP,EADL,KAEhB,OAAKV,GAASiB,EAIZ,sBAAKZ,UAAU,MAAf,UACE,sDACA,cAAC,EAAD,CAAaL,KAAMA,IACnB,sBAAKK,UAAU,kBAAf,UACGL,EAAKG,OAAS,IAAM,wBAAQ8B,QAAS,yBAAMhB,QAAN,IAAMA,OAAN,EAAMA,EAAQY,OAA/B,iBACrB,wBAAQxB,UAAWL,EAAKG,MAAQ,GAAK,OAAS,GAAI8B,QAAS,WAAOhB,EAAOc,QAAQJ,MAAK,kBAAMV,EAAOP,YAAnG,SACGV,EAAKG,MAAQ,GAAK,aAAe,aAItC,cAAC,EAAD,CAAYO,MAAOA,OAbd,mDEHXwB,IAASC,OACP,cAAC,aAAD,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.86688939.chunk.js","sourcesContent":["import { FC } from \"react\";\r\nimport { HandState } from \"../client\";\r\n\r\nexport const CardDisplay: FC<{hand: HandState}> = ({hand}) => (\r\n    <> \r\n        <div>{hand.hand.reverse().map(([value, suit]) => (\r\n          <img className=\"card\" src={`${process.env.PUBLIC_URL}/cards/${typeof(value) === \"number\" ? value : value[0]}${suit[0]}.png`} alt={`${value} of ${suit}`} />\r\n        ))}\r\n        </div>\r\n\r\n        <div>Current score: {hand.value}</div>\r\n        \r\n        {hand.value > 21 && \"You are bust, unlucky.\"}\r\n    </> \r\n)","import { FC } from \"react\";\r\nimport { Stats } from \"../client\";\r\n\r\nexport const StatsPanel: FC<{stats?: Stats}> = ({ stats}) => { \r\n    if(!stats) { \r\n        return null; \r\n    }\r\n\r\n    const { games, busts, average } = stats; \r\n    return (<div>\r\n        <div>\r\n            Games: {games} \r\n        </div>\r\n        <div>\r\n            Busts: {busts} \r\n        </div>\r\n        <div>\r\n            Average: {average.toFixed(2)} \r\n        </div>\r\n    </div>)\r\n}","import \"./App.css\";\nimport { useClient } from \"./client\";\nimport { CardDisplay } from \"./components/CardDisplay\";\nimport { StatsPanel } from \"./components/StatsPanel\"; \n\nconst App = () => {\n  const [hand, client, stats] = useClient();\n  if (!hand || !client) {\n    return <>Loading...</>;\n  }\n  return (\n    <div className=\"App\">\n      <h1>Welcome to Blackjack</h1>\n      <CardDisplay hand={hand} />\n      <div className=\"buttonContainer\">\n        {hand.value <= 21 && <button onClick={() => client?.hit()}>Hit</button>}\n        <button className={hand.value > 21 ? \"bust\" : \"\"} onClick={() =>{ client.reset().then(() => client.stats()) }}>\n          {hand.value > 21 ? \"Try again.\" : \"Stick\"}\n        </button>\n      </div>\n\n      <StatsPanel stats={stats} /> \n    </div>\n  );\n};\n\nexport default App;\n","import { useEffect, useRef, useState } from \"react\";\r\n\r\ntype Suit = \"Spades\" | \"Hearts\" | \"Diamonds\" | \"Clubs\";\r\ntype CardValue = number | \"Jack\" | \"Queen\" | \"King\" | \"Ace\";\r\n\r\ntype Card = [CardValue, Suit];\r\n\r\nexport interface HandState {\r\n  hand: Card[];\r\n  value: number;\r\n  busted?: boolean;\r\n}\r\n\r\ninterface BlackjackClient {\r\n  hit: () => Promise<void>;\r\n  cards: () => Promise<void>;\r\n  reset: () => Promise<void>; \r\n  stats: () => Promise<void>;\r\n}\r\n\r\nexport interface Stats { \r\n    games: number, \r\n    total: number, \r\n    busts: number, \r\n    average: number\r\n}\r\n\r\ndeclare var TCPSocket: any;\r\n\r\nexport const useClient = (): [HandState | undefined, BlackjackClient | undefined, Stats | undefined] => {\r\n  const [client, setClient] = useState<BlackjackClient | undefined>(); \r\n  const [hand, setHand] = useState<HandState | undefined>() \r\n  const [stats, setStats] = useState<Stats | undefined>(); \r\n\r\n  const handUpdateCall = (endpoint: string) => async (): Promise<void> => {\r\n    const hand = await (await fetch(`/${endpoint}`)).json();\r\n    setHand(hand); \r\n  }\r\n\r\n  useEffect(() => { \r\n    fetch(`/connect`).then(body => body.json()).then(hand => { \r\n        setHand(hand); \r\n        setClient({ \r\n            hit: handUpdateCall(\"hit\"),\r\n            cards: handUpdateCall(\"cards\"),\r\n            reset: handUpdateCall(\"reset\"),\r\n            stats: async () => { \r\n                const stats = await (await fetch(`/stats`)).json();\r\n                setStats(stats); \r\n            },\r\n        });\r\n    })\r\n  }, [])\r\n  return [hand, client, stats];\r\n};\r\n","import { StrictMode } from \"react\"; \nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <StrictMode>\n    <App />\n  </StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}